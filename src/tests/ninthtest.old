# include <genesis.h>
# include <resources.h>
/*
u32 x = 0;
u32 y = 0;

s16 cameraX = 0;
s16 cameraY = 0;

u8 direction = 0; // 0 up, 1 right, 2 down, 3 left
*/

const u32 borderTile[8]=
{
    0x11111111,
    0x11111111,
    0x11111111,
    0x11111111,
    0x11111111,
    0x11111111,
    0x11111111,
    0x11111111,
};

/*
const u32 pathTile[8]=
{
    0x21212121,
    0x12121212,
    0x21212121,
    0x12121212,
    0x21212121,
    0x12121212,
    0x21212121,
    0x12121212,
};

const u32 claimTile[8]=
{
    0x33333333,
    0x33333333,
	0x33333333,
	0x33333333,
	0x33333333,
	0x33333333,
	0x33333333,
	0x33333333,

};
*/
struct Camera {
	s16 x; //s16 since scroll methods take s16 parameters.
	s16 y;
};
struct Player {
	u8 direction; // only need 4 directions of the 256 values possible. 1 up 2 right 3 down 4 left
	s16 x; // value in pixels
	s16 y;
	u8 nextDirection; // if inputs made while moving, stored here to use at next direction decision.
	Sprite *sprite; // holds the player's sprite, used when drawing.
	u8 gameover; // 0 not gameover 1 is gameover. goal, display screen asking retry or quit.
	u8 pathMapValue; // values used to represent player's claim/path numbers in map matrix. 
	u8 claimMapValue;//
	u8 isOnPath; // 1 if on path, 0 if not currently on path. used for claim/path calculation.
	s16 claimMinX; // claim min/max XY are to track bounds of players claim in map. used for path claim fill method.
	s16 claimMaxX; //
	s16 claimMinY; //
	s16 claimMaxY; //
};
struct ComputerPlayers {
	struct Player computers[20]; // allocate enough data for 20 computer players. if free memory later, increase?
	u8 computerCount; // how many computer players in game.
};
struct GameMap {
	u8 values[4096]; // allocate in advance max tileMap size (thus GameMap size) array vals which is 64x64 or 32x128, ultimately 4096.
	u8 columns;      // member values columns and rows represent how data is stored in the array.
	u8 rows;         // essentially creating a 2D array of size columns*rows out of 1D. if values array is bigger than needed, extra values are simply ignored.
};
struct GameMap map;
struct Camera camera;
struct Player humanPlayer;
struct ComputerPlayers computerPlayers;
//u8 computersAmount = 1; // set to one as default value
//struct Player computers[1]; // should create variable representing array of Player structs. manually set to 1 AI for now.

u16 search; // 16 bits since max search value could be 4096.
u8 getGameMapValue(u8 row, u8 column) {
	search = row * map.rows;
	search += column;
	return map.values[search]; // todo, bounds checking on input request
}
void setGameMapValue(u8 row, u8 column, u8 value) { 
	search = row * map.rows;
	search += column;
	map.values[search] = value; // todo bounds checking
}
void setTileMapGameValue(u8 row, u8 column, u8 value) { 
	if (value == 0) { // unclaimed
		VDP_clearTileMapRect(PLAN_A,column,row,1,1);
	} else if (value == 1) { // wall
		VDP_setTileMapXY(PLAN_A,TILE_ATTR_FULL(PAL0,0,FALSE,FALSE,value),column,row);
	}/* else if (value % 2 != 0) { // odd, is a claim value
		VDP_setTileMapXY(PLAN_A,3,column,row);
	} else if (value % 2 == 0) { // even, is a path value
		VDP_setTileMapXY(PLAN_A,2,column,row);
	}*/
	else {
		VDP_setTileMapXY(PLAN_A,TILE_ATTR_FULL(PAL1,0,FALSE,FALSE,value),column,row);
	}
}
u8 getValueAtPlayer(struct Player player) { // this is needed since player xy is stored as pixels (aka 8ths of tiles/map positions)
	if (player.x % 8 == 0 && player.y % 8 == 0) { // if player at XY 8 multiple (easy translate to map)
		return getGameMapValue(player.y / 8, player.x / 8);
	} else if (player.x % 8 != 0 && player.y % 8 == 0) { // if player at y multiple but not x multiple
		if (player.direction == 4) { // if player going left
			return getGameMapValue(player.y/8,player.x/8);
		} else if (player.direction == 2) { // if player going right
			return getGameMapValue(player.y/8,(player.x/8)+1);
		}
	} else if (player.x % 8 == 0 && player.y % 8 != 0) { // if player at x multiple but not y multiple
		if (player.direction == 1) { // if player going up
			return getGameMapValue(player.y/8,player.x/8);
		} else if (player.direction == 3) { // if player going down
			return getGameMapValue((player.y/8)+1,player.x/8);
		}
	}
	return 1; // it shouldn't get here.... if it does, return 1 since 1 represents wall value.
}

u16 randomX;
u16 randomY;
void spawnHumanPlayer() {
	randomX = random() % (map.columns-2); // -2 the modulo to ensure player and claim not trying to spawn inside map edge bounds (right/bottom)
	randomY = random() % (map.rows-2);    // XY based on GameMap. multiply by 8 to get respective pixel values
	if (randomX < 2) { // ensure player and claim not trying to spawn inside map edge bounds (left/top)
		randomX = 2;
	}
	if (randomY < 2) {
		randomY = 2;
	}
	humanPlayer.x = 8*randomX;
	humanPlayer.y = 8*randomY;
	for (u8 i = randomY-1; i <= randomY+1; i++) {
		for (u8 j = randomX-1; j <= randomX+1; j++) {
			setGameMapValue(i,j,humanPlayer.claimMapValue);
			setTileMapGameValue(i,j,humanPlayer.claimMapValue);
		}
	}
	humanPlayer.claimMinX = (humanPlayer.x / 8) - 1; //setting claim bounds based on map and spawn position. one space left of humanPlayer.
	humanPlayer.claimMaxX = (humanPlayer.x / 8) + 1; // one space right of humanplayer
	humanPlayer.claimMinY = (humanPlayer.y / 8) - 1; // one space up(?) from humanplayer
	humanPlayer.claimMaxY = (humanPlayer.y / 8) + 1; // one space down(?) from humanplayer
}
void spawnComputerPlayers() {
	for (u8 c = 0; c < computerPlayers.computerCount; c++) { // iterate over each computer player
		randomX = random() % (map.columns-2); // -2 the modulo to ensure player and claim not trying to spawn inside map edge bounds (right/bottom)
		randomY = random() % (map.rows-2);    // XY based on GameMap. multiply by 8 to get respective pixel values
		if (randomX < 2) { // ensure player and claim not trying to spawn inside map edge bounds (left/top)
			randomX = 2;
		}
		if (randomY < 2) {
			randomY = 2;
		}
		computerPlayers.computers[c].x = 8*randomX;
		computerPlayers.computers[c].y = 8*randomY;
		for (u8 i = randomY-1; i <= randomY+1; i++) {
			for (u8 j = randomX-1; j <= randomX+1; j++) {
				setGameMapValue(i,j,computerPlayers.computers[c].claimMapValue);
				setTileMapGameValue(i,j,computerPlayers.computers[c].claimMapValue);
			}
		}
		computerPlayers.computers[c].claimMinX = (computerPlayers.computers[c].x / 8) - 1; //setting claim bounds based on map and spawn position. one space left of Player.
		computerPlayers.computers[c].claimMaxX = (computerPlayers.computers[c].x / 8) + 1; // one space right of player
		computerPlayers.computers[c].claimMinY = (computerPlayers.computers[c].y / 8) - 1; // one space up(?) from player
		computerPlayers.computers[c].claimMaxY = (computerPlayers.computers[c].y / 8) + 1; // one space down(?) from player
	}
}

u8 hasClaimLeft;
u8 hasClaimRight;
u8 hasClaimUp;
u8 hasClaimDown;
void fillPlayerPath(struct Player player) {
	for (u8 y = player.claimMinY; y <= player.claimMaxY; y++) {     // only look to fill in map values within player's claim area
		for (u8 x = player.claimMinX; x <= player.claimMaxX; x++) { //
			if (getGameMapValue(y,x) == player.pathMapValue) { // set any path tiles to claimed tiles
				setGameMapValue(y,x,player.claimMapValue);
				setTileMapGameValue(y,x,player.claimMapValue);
			}
		}
	}
	for (u8 y = player.claimMinY; y <= player.claimMaxY; y++) {     // only look to fill in map values within player's claim area
		for (u8 x = player.claimMinX; x <= player.claimMaxX; x++) { // path fill algorithm is generous
//			if (getGameMapValue(y,x) == 0) { // if unclaimed, search in 4 directions outward from tile at (y,x) to ensure there are claims on all sides
			if (getGameMapValue(y,x) != player.claimMapValue) { // if not player's claim, search in 4 directions outward from tile at (y,x) to ensure there are claims on all sides
				hasClaimLeft = 0; // 0 false 1 true. if all are 1, tile should be filled
				hasClaimRight = 0;
				hasClaimUp = 0;
				hasClaimDown = 0;
				if (y != player.claimMinY) {
					for (u8 i = y-1; i >= player.claimMinY; i--) { // check values up from tile at (y,x)
						if (getGameMapValue(i,x) == player.claimMapValue) {
							hasClaimUp = 1;
							break;
						}
					}
					if (hasClaimUp == 0) { // if search failed, skip tile
						continue;
					}
				}
				if (y != player.claimMaxY) {
					for (u8 i = y+1; i <= player.claimMaxY; i++) { // check values down from tile at (y,x)
						if (getGameMapValue(i,x) == player.claimMapValue) {
							hasClaimDown = 1;
							break;
						}
					}
					if (hasClaimDown == 0) { // if search failed, skip tile
						continue;
					}
				}
				if (x != player.claimMinX) {
					for (u8 i = x-1; i >= player.claimMinX; i--) { // check values left from tile at (y,x)
						if (getGameMapValue(y,i) == player.claimMapValue) {
							hasClaimLeft = 1;
							break;
						}
					}
					if (hasClaimLeft == 0) { // if search failed, skip tile
						continue;
					}
				}
				if (x != player.claimMaxX) {
					for (u8 i = x+1; i <= player.claimMaxX; i++) { // check values right from tile at (y,x)
						if (getGameMapValue(y,i) == player.claimMapValue) {
							hasClaimRight = 1;
							break;
						}
					}
				}
				if (hasClaimRight == 0) { // if search failed, skip tile
						continue;
					}

				if (hasClaimLeft == 1 && hasClaimRight == 1 && hasClaimUp == 1 && hasClaimDown == 1) { // still checking all for sanity check
					setGameMapValue(y,x,player.claimMapValue);
					setTileMapGameValue(y,x,player.claimMapValue);
				}
			}
		}
	}
}

void initMap(u8 rows, u8 columns) {
	VDP_clearPlan(PLAN_A,1); // to avoid running setTileMapGameValue for up to 4096 iterations when clearing map
	map.rows = rows;   
	map.columns = columns;
	//set all map to unclaimed
    for (u8 j = 0; j < map.rows; j++) {
    	for (u8 k = 0; k < map.columns; k++) {
    		setGameMapValue(j,k,0); // 0 represents an unclaimed tile so all tiles are being set to zero
    	}
    }
    //set borders of map as walls
    for (u8 j = 0; j < map.columns; j++) { // upper lower borders
    	setGameMapValue(0,j,1);
		setTileMapGameValue(0,j,1);
		setGameMapValue(map.rows-1,j,1); // map.rows-1 should be index of lower wall
		setTileMapGameValue(map.rows-1,j,1);
    }
    for (u8 j = 0; j < map.rows; j++) { // side borders
    	setGameMapValue(j,0,1);
    	setTileMapGameValue(j,0,1);
    	setGameMapValue(j,map.columns-1,1); // map.columns-1 should be index of right wall
    	setTileMapGameValue(j,map.columns-1,1);
    }
}

void adjustCamera() {
	// adjust based on player. trying to center it.
	// let's experiment by just working out a raw centering algorithm.
	// cameraXY is 0 and based on pixels and each spriteXY is pixel based but has 8x8 size.
	// so, cameraX = humanPlayerX - 160 , cameraY = humanPlayerY - 112 ? each is half of pixel distance of XY screen res.
	camera.x = 160 - humanPlayer.x;
	camera.y = humanPlayer.y - 112;
	//
	// if camera is off screen left/up, fix that.
	if (camera.x > 0) camera.x = 0;
	if (camera.y < 0) camera.y = 0;
	// if camera is far enough to start looping right/down, fix that.
	if (camera.x < -192) camera.x = -192;
	if (camera.y > 288) camera.y = 288; // so far we're guessing/forcing magic numbers against map WH >->
	//

}

void drawPlayers() {
	// players have xy vals relative to map, albeit pixel.
	// relative to camera we can only see cameraX+320(319?) and cameraY+112(111?)
	// and relative to sprite layer, draw at playerXY-cameraXY
	SPR_setPosition(humanPlayer.sprite,humanPlayer.x+camera.x,humanPlayer.y-camera.y);
	if (computerPlayers.computers[0].gameover == 0) { // if computer not gameover, display them
		SPR_setPosition(computerPlayers.computers[0].sprite,computerPlayers.computers[0].x+camera.x,computerPlayers.computers[0].y-camera.y);
	}
}

void movePlayers() {
	// move players and orient them if at a tile multiple.
	if (humanPlayer.direction == 1) { // up
		humanPlayer.y--;
	} else if (humanPlayer.direction == 3) { // down
		humanPlayer.y++;
	} else if (humanPlayer.direction == 2) { // right
		humanPlayer.x++;
	} else if (humanPlayer.direction == 4) { // left ... in retrospect i think C has switch(){} for this. and would be more optimized.
		humanPlayer.x--;
	}
	if (humanPlayer.x % 8 == 0 && humanPlayer.y % 8 == 0) {
		humanPlayer.direction = humanPlayer.nextDirection;
	}
	for (u8 i = 0; i < computerPlayers.computerCount; i++) { // for each computer player
		if (computerPlayers.computers[i].gameover == 0) {// if computer not gameover, move them 
			if (computerPlayers.computers[i].direction == 1) { // up
				computerPlayers.computers[i].y--;
			} else if (computerPlayers.computers[i].direction == 3) { // down
				computerPlayers.computers[i].y++;
			} else if (computerPlayers.computers[i].direction == 2) { // right
				computerPlayers.computers[i].x++;
			} else if (computerPlayers.computers[i].direction == 4) { // left ... in retrospect i think C has switch(){} for this. and would be more optimized.
				computerPlayers.computers[i].x--;
			}
			if (computerPlayers.computers[i].x % 8 == 0 && computerPlayers.computers[i].y % 8 == 0) {
				computerPlayers.computers[i].direction = computerPlayers.computers[i].nextDirection;
			}
		}
	}
	
}

void gameoverHumanPlayer() {

}

void gameoverComputerPlayer(u8 c) { // c is desired index of computerPlayers.computers array of Players.
	for (u8 y = 0; y < map.rows; y++) {       // for all map values check if belongs to player and if so empty it
		for (u8 x = 0; x < map.columns; x++) {// 
			if (getGameMapValue(y,x) == computerPlayers.computers[c].pathMapValue || getGameMapValue(y,x) == computerPlayers.computers[c].claimMapValue) {
				// if value belongs to player
				setGameMapValue(y,x,0); // set empty
				setTileMapGameValue(y,x,0); // set tilemap empty
			}
		}
	}
	SPR_setVisibility(computerPlayers.computers[c].sprite,HIDDEN);
}

void checkPlayers() {
	// (check if two players collide but we can do that later)
	// check if players collide with wall, .. check if players collide with a path/claim in map
	// for checking a player position against the map, round up. if position was just at a multiple, and increments, always round up to next map spot (ceiling).
	if (getValueAtPlayer(humanPlayer) == 1) { // humanplayer hit wall
		//gameover , reset screen(?)
		humanPlayer.gameover = 1; // gameover player
		gameoverHumanPlayer();
	}
	for (u8 i = 0; i < computerPlayers.computerCount; i++) { // check all computer wall collisions
		if (computerPlayers.computers[i].gameover == 0) { // if not gameover, check computer wall collision
			if (getValueAtPlayer(computerPlayers.computers[i]) == 1) { // computer hit wall
				computerPlayers.computers[i].gameover = 1; // gameover computer
				gameoverComputerPlayer(i);                 // 
			}
		}
	}
	
	if (humanPlayer.x % 8 == 0 && humanPlayer.y % 8 == 0) { // if humanplayer at multiple (thus xy/8 is map value)
		if (humanPlayer.isOnPath) {
			if (humanPlayer.x / 8 < humanPlayer.claimMinX) { // adjust humanplayer's claim bounds
				humanPlayer.claimMinX = humanPlayer.x / 8;
			} else if (humanPlayer.x / 8 > humanPlayer.claimMaxX) {
				humanPlayer.claimMaxX = humanPlayer.x / 8;
			} else if (humanPlayer.y / 8 < humanPlayer.claimMinY) {
				humanPlayer.claimMinY = humanPlayer.y / 8;
			} else if (humanPlayer.y / 8 > humanPlayer.claimMaxY) {
				humanPlayer.claimMaxY = humanPlayer.y / 8;
			}
		}
		if (getValueAtPlayer(humanPlayer) == 0) { // if hit unclaimed
			setGameMapValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);    // claim it (path)
			setTileMapGameValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);//
			if (!humanPlayer.isOnPath) {
				humanPlayer.isOnPath = 1;
			} 
		} else if (getValueAtPlayer(humanPlayer) == humanPlayer.claimMapValue) { // if humanplayer hit humanplayer's claim
			if (humanPlayer.isOnPath) {
				humanPlayer.isOnPath = 0;
				// run fill method
				fillPlayerPath(humanPlayer);
			}
		}
		
		for (u8 i = 0; i < computerPlayers.computerCount; i++) { // check all computers against humanplayer
			if (getValueAtPlayer(humanPlayer) == computerPlayers.computers[i].pathMapValue) { // check if player hits that computers path
				gameoverComputerPlayer(i); // if so, gameover the respective computer player
				computerPlayers.computers[i].gameover = 1;
				if (humanPlayer.isOnPath == 1) { // if on path set map val and tile for path
					setGameMapValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);    // claim it (path)
					setTileMapGameValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);//
				} else if (humanPlayer.isOnPath == 0) { // else if still in own claim, set map val and tile for claim
					setGameMapValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.claimMapValue);    // claim it (claim)
					setTileMapGameValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.claimMapValue);//
				}
			} else if (getValueAtPlayer(humanPlayer) == computerPlayers.computers[i].claimMapValue) { // check if player hits that computers claim
				// todo , reduce computer players score by 1 tile
				setGameMapValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);    // claim it (path)
				setTileMapGameValue(humanPlayer.y/8,humanPlayer.x/8,humanPlayer.pathMapValue);// (same as unclaimed logic)
				if (!humanPlayer.isOnPath) {
					humanPlayer.isOnPath = 1;
				}
			}
		}
	}
	
	for (u8 i = 0; i < computerPlayers.computerCount; i++) {
		if (computerPlayers.computers[i].gameover == 0) { // if not gameover, check computer game states
			if (computerPlayers.computers[i].x % 8 == 0 && computerPlayers.computers[i].y % 8 == 0) { // if player at multiple (thus xy/8 is map value)
				if (computerPlayers.computers[i].isOnPath) {
					if (computerPlayers.computers[i].x / 8 < computerPlayers.computers[i].claimMinX) { // adjust player's claim bounds
						computerPlayers.computers[i].claimMinX = computerPlayers.computers[i].x / 8;
					} else if (computerPlayers.computers[i].x / 8 > computerPlayers.computers[i].claimMaxX) {
						computerPlayers.computers[i].claimMaxX = computerPlayers.computers[i].x / 8;
					} else if (computerPlayers.computers[i].y / 8 < computerPlayers.computers[i].claimMinY) {
						computerPlayers.computers[i].claimMinY = computerPlayers.computers[i].y / 8;
					} else if (computerPlayers.computers[i].y / 8 > computerPlayers.computers[i].claimMaxY) {
						computerPlayers.computers[i].claimMaxY = computerPlayers.computers[i].y / 8;
					}
				}
				if (getValueAtPlayer(computerPlayers.computers[i]) == 0) { // if hit unclaimed
					setGameMapValue(computerPlayers.computers[i].y/8,computerPlayers.computers[i].x/8,computerPlayers.computers[i].pathMapValue);    // claim it (path)
					setTileMapGameValue(computerPlayers.computers[i].y/8,computerPlayers.computers[i].x/8,computerPlayers.computers[i].pathMapValue);//
					if (!computerPlayers.computers[i].isOnPath) {
						computerPlayers.computers[i].isOnPath = 1;
					} 
				} else if (getValueAtPlayer(computerPlayers.computers[i]) == computerPlayers.computers[i].claimMapValue) { // if player hit their own claim
					if (computerPlayers.computers[i].isOnPath) {
						computerPlayers.computers[i].isOnPath = 0;
						// run fill method
						fillPlayerPath(computerPlayers.computers[i]);
					}
				}
			}
		}
	}
	
}

void myJoyHandler(u16 joy, u16 changed, u16 state)
{
    if (joy == JOY_1) {
        if (state & BUTTON_START) {
         // player 1 pressed START button
//            VDP_drawText("player1 START pressed  | TOMAWEZOME",0,0);
			//humanPlayer.nextDirection = 0;
        } else if (changed & BUTTON_START) {
         // player 1 released START button
//            VDP_drawText("player1 START released | AWEZOMETOM",0,0);
			//humanPlayer.nextDirection = 0;
			spawnHumanPlayer();
        }
        
        else if (state & BUTTON_UP) {
        	if (humanPlayer.direction != 3) { // can't go up into path if going down
	        	humanPlayer.nextDirection = 1;
				computerPlayers.computers[0].nextDirection = 1;
	        }
            /*y--;
            cameraY = cameraY-8;*/
//            VDP_resetScreen();
        } else if (state & BUTTON_DOWN) {
        	if (humanPlayer.direction != 1) { // can't go down into path if going up
	        	humanPlayer.nextDirection = 3;
	        	computerPlayers.computers[0].nextDirection = 3;
	        }
            /*y++;
            cameraY = cameraY+8;*/
//            SRAM_writeByte(x,x);
//            VDP_resetScreen();
        } else if (state & BUTTON_LEFT) {
        	if (humanPlayer.direction != 2) { // can't go left into path if going right
        		humanPlayer.nextDirection = 4;
        		computerPlayers.computers[0].nextDirection = 4;
            }
            /*x--;
            cameraX = cameraX + 8;*/
//            VDP_resetScreen();
        } else if (state & BUTTON_RIGHT) {
        	if (humanPlayer.direction != 4) { // can't go right into path if going left
        		humanPlayer.nextDirection = 2;
        		computerPlayers.computers[0].nextDirection = 2;
            }
            /*x++;
            cameraX = cameraX - 8;*/
//            VDP_resetScreen();
        }
    }
}

int main()
{
	VDP_setPlanSize(64,64); //hard set 64 since early testing, later make variable and user-settable/influencable
    VDP_loadTileData((const u32 *)borderTile,1,1,0);
/*    VDP_loadTileData((const u32 *)pathTile,2,1,0);
    VDP_loadTileData((const u32 *)claimTile,3,1,0);*/
    VDP_loadTileData(strawberrypath.tileset->tiles,2,2,0);
    VDP_loadTileData(cowpath.tileset->tiles,4,2,0);

	computerPlayers.computerCount = 1;
	
	VDP_setPalette(PAL2,strawberry.palette->data);
	VDP_setPalette(PAL1,cowpath.palette->data);
	Sprite* berry;
	Sprite* cowSprite;
	SPR_init(0,0,0);
	berry = SPR_addSprite(&strawberry,0,0,TILE_ATTR(PAL2,0,FALSE,FALSE));
	cowSprite = SPR_addSprite(&cow,0,0,TILE_ATTR(PAL1,0,FALSE,FALSE));
	humanPlayer.sprite = berry;
	for (u8 i = 0; i < computerPlayers.computerCount; i++) { // logic in here 100% needs to be changed
		computerPlayers.computers[i].sprite = cowSprite;
	}
	SPR_setPosition(berry,0,0);
	SPR_setPosition(cowSprite,0,0);

	// need to work out table of values to represent things, or create algorithm to determine what each value should be.
	// second option, dynamic, sounds better. they're all unsigned so positive vals only.
	// each player will have a path tile, and a claim tile. so assign these values based on how many players and computers * 2.
	humanPlayer.pathMapValue = 2;
	humanPlayer.claimMapValue = 3;
//	u8 computersAmount = sizeof(computers)/sizeof(computers[0]);
	u8 mapValueCounter = 4;
	for (u8 i = 0; i < computerPlayers.computerCount; i++) {
		computerPlayers.computers[i].pathMapValue = mapValueCounter;
		mapValueCounter++;
		computerPlayers.computers[i].claimMapValue = mapValueCounter;
		mapValueCounter++;
	}

	////// INIT MAP
	initMap(64,64); // set active data range of map to 64x64., reuse  to let user alter level setting later.
        
    JOY_init();
    JOY_setEventHandler( &myJoyHandler);    

/*	humanPlayer.x = 40; // put human player somewhere within map
	humanPlayer.y = 40; // */
//	setRandomSeed(4534);
	spawnComputerPlayers();
	spawnHumanPlayer();
	char debugString[40];
    while (1)
    {
        //read input
        //move sprite
        //update score
        //draw current screen (logo, start screen, settings, game, gameover, credits..)

//        VDP_setTileMapXY(PLAN_A,1,x,y);

        VDP_showFPS(0);
		VDP_setHorizontalScroll(PLAN_A,camera.x);
		VDP_setVerticalScroll(PLAN_A,camera.y);
		intToStr(hasClaimLeft == 1 && hasClaimRight == 1 && hasClaimUp == 1 && hasClaimDown == 1,debugString,0);
		VDP_drawText("       ",4,4);
		VDP_drawText(debugString,4,4);
		movePlayers();
		adjustCamera();
		checkPlayers();
		drawPlayers();
		SPR_update();
        VDP_waitVSync();
    }
    return 0;
}
